require 'funktor/job'
require 'funktor/middleware/new_relic'

RSpec.describe Funktor::Middleware::NewRelic do
  let(:job_double)do
    double Funktor::Job, worker_class_name_for_metrics: "MiddlewareTestWorker", queue: "default", worker_params: ['hi']
  end
  describe 'call' do
    it 'yields to a block traces via NewRelic' do
      stub_request(:put, "http://169.254.169.254/latest/api/token").
        with(
          headers: {
            'Accept'=>'*/*',
            'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
            'User-Agent'=>'Ruby',
            'X-Aws-Ec2-Metadata-Token-Ttl-Seconds'=>'60'
          }).
          to_return(status: 200, body: "", headers: {})
      stub_request(:get, "http://169.254.169.254/latest/dynamic/instance-identity/document").
        with(
          headers: {
            'Accept'=>'*/*',
            'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
            'Host'=>'169.254.169.254',
            'User-Agent'=>'Ruby',
            'X-Aws-Ec2-Metadata-Token'=>''
          }).
          to_return(status: 200, body: "", headers: {})
      stub_request(:get, "http://metadata.google.internal/computeMetadata/v1/instance/?recursive=true").
        with(
          headers: {
            'Accept'=>'*/*',
            'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
            'Host'=>'metadata.google.internal',
            'Metadata-Flavor'=>'Google',
            'User-Agent'=>'Ruby'
          }).
          to_return(status: 200, body: "", headers: {})
      stub_request(:get, "http://169.254.169.254/metadata/instance/compute?api-version=2017-03-01").
        with(
          headers: {
            'Accept'=>'*/*',
            'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
            'Host'=>'169.254.169.254',
            'Metadata'=>'true',
            'User-Agent'=>'Ruby'
          }).
          to_return(status: 200, body: "", headers: {})
      stub_request(:post, "https://collector.newrelic.com/agent_listener/invoke_raw_method?license_key=&marshal_format=json&method=preconnect&protocol_version=17").
         with(
           body: "[{\"high_security\":false}]",
           headers: {
          'Accept'=>'*/*',
          'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
          'Content-Encoding'=>'identity',
          'Content-Type'=>'application/octet-stream',
          'Host'=>'collector.newrelic.com',
          'User-Agent'=>'NewRelic-RubyAgent/8.8.0 (ruby 2.7.3 x86_64-darwin20) zlib/1.2.11'
           }).
         to_return(status: 200, body: "", headers: {})
      stub_request(:post, "https://collector.newrelic.com/agent_listener/invoke_raw_method?license_key=&marshal_format=json&method=connect&protocol_version=17").
         with(
           body: "\x1F\x8B\b\x00\x97\xCF\x9Fb\x00\x03\x95Z\xDB\x8E\xE36\x12\xFD\x95\x86\x81\x00\x9D\x85[#\xF9\xD6\xB6\xDE\x82l\xB2/{\t\x12\xEC\xD3` P\x12ek,\x89\nIu\xB7'\x98\x7F\xDFS$u\xB1d\xB9{\x13\xA0\xC7\xAC:,\x92\xC5b]H}\xFEkQ\xE7\xE9\"|^\x1F\x9EW\xCB\xC5I(\xBD\b\x17\xFFI\xB4\xF8\x17K\x16\xCBE\x9A\xAB\xBA`\x97h\xC2`u\x1DU\xAC\xE4\x8B\xF0\xF3\"\xE5/\xBC\x10u\xC9+\xBD\xF8\xB2\\\x14\xAC:6\xEC\b\xD6B6\xF1eA\x94\x98\x17\nPp\xC1\xA8t\xF4\xC2\xA5\xCAE\x05\xC8\xDE\xDB{>0\xBCz\xC9\xA5\xA8\x8C\x90\xF0\xF3\xE7\xC5?x\xA9\x16\xCB\xCF\v\xC9\xCE\xFC1Xyko\xFD#`\x89\xA8\x92FJ\xA0\x9EH\xF8c\xE0\x05\xDE\x81\x18y\xB0\xAF\xD0\xDA{\x81O\xCD2\xAFr\xCD\x95~\xDCz\xC1\xC6\xDB\x10I\x7F\xCB\xABL<\xAE<\xDF\xB6\xBF\xF1\\\xBFry\x06e\xE3\xAD\x88\xC2\x12\x9D\xBFp\xD5\xD4\xB5\x90\xFAq\a\xD1\e/ \xC6\xB1\x101+\xF2\xF4\xD1\xF7\xB6C\xE8W\x11\x0Fau\x13\x17y\x12\xA9&\xCB\xF2\xB7\xC7\r\x06\xDA\x19l\x9AJ\xAE\x14\x8B\v\x8E\xB1\xB0\\C|UO\xD0[\xA5\x95\x96\x9C\x95\x98\xFA\xAAg\xD4L\xEA\\CA\n\xF4\xED\xE1\xB9\xE7\xA8\xFC\xF8\xB2!\xA2%}-\xB9\xAA\x99>\x81\xB2\xB3s0\xA0\xF4\xFC\x94\b\xC9\x1F\xD7^\xB0\x0E\xAE\xE9\xE9\x05\xDB&\xD2\x18=\x9E7\x03\xB9`\xA9?\xCDp\xAEC\xDCTi\xC1%f\x8C\xFF\xB7\x86r\xE1qs|\fH\xE7n3R.\x99\xDD\x04C\x90\xFC\xAD,0\xEA\xCA3\x1D\x12\xC9\x923t\xB6\xB1\xCD4\xCF\xB2\xA7\"\xA1A\xDC\x96\xA4\"\xC9\xA1\x14j\x9B\x99\xE8\x93\x90F\x13f\x06YS\x9D5\b\xBE\xF7\xEC\xAD\xF6D91u\")\xC0\xF8\x16Sr\xF4I#%\x1A\x99pC6\x82\xC86V\xD1\x99_^\x85L\x15$\xF8v\ne\xA34\x97%\xAB*3i#\xA2\xE2\xAF\x92\xD3\xBE\xC9\xBA|\xDC\xB7\xFBS\xCB\v\xBA\x05k\xB7\xB3\xF2\xF2\xE4\x96\xBF\xF6\x0En\fZ\x1Cig\xDD\xB6\x9Ej)4Oh\xE3\xC0\b\x1CL\xD5<yj\x8D\n\xF2|kA\x96\xDEn\x93[\x8E%\xF27\xFC\xD5\xCC\x1A\xC0\x98Y\x8A\xE4\xAC\xC6rl\xDB\x8C\xA7\xF2\xB2.x\"^\x9EN\x1A\x9B\x81\xBEn\x86\x1D#\xFA\xAAD\x15e\x02z\xD0\xD0\x06AF\b\x90V\x81\x15\xAF\xF3B\x9B3\x138\xE9\x15\xD3\x92\xF5\xCB\xD3y\x89\x1E5z\x1C\xEC\x9E\xBE\xF2\x98\xA6H32\xBB\xFA\xE5\vN\xF1\xEF\xD8\x8F\x87\xF6\xD0/\x17+\xEC\xE8z\xD11R\xAE\x12\x99\xD7\xDA2i\xEF\x1E\f\xA2\x0E\xF6\xEB\x87\xC7\x95\xBF\n\x9E\xFC\xCD\x93\xBF}\x90\xFC%'\x11\x0F\xBB\xFD\xE6\x99s\x7F\x7FH\x7F|\xF8\xFC\xB6\xDFE\xBB\xCDS\xCA\xE4k^\xAD\xFC/\xBD`\xF8.M\xEB\x84\xD4\x11h\x80a:9\x15\xE4\xC2\x80\xC2\x80\x86\xF3Oq\xCC\x13V<\xFC&E\x82\xA3+$|Q\xB0#\xCEo\xA7\x8B2\xAC\x9F\xB1s\xA0\xEE\x89\xF8\x93LN\xDD\x18F\xC0\x7F\xFE \xF3\x1E\x0E\xF6\xAB\x84\xBB\x849\x9E\xDD\x12\r\xF1\xEF\xB92\xE3s\t\xAA\xA1\xFC2\xF0\x83\xCB\x91k\x85\xD8\x9AW\x7F\xFC\xF1\xCF\x81*[\x8A1\xE7\xF3\xC3\xC3j\xFB\xF0/&\x1FHi\xA4z: ,e\x9A-\xC2\xBF\xBEc\xFB\xB8\xD6yu\x84/\xFEk\x01\x93\xE7\x95\xE2tJ\xE0\x87\x17\xADk\xE6\x159*\xC4\x04-\eN~\xF9\xAA\xD9\xFB\xFD\xAB\xB9a\x1C\x01\x87+d\x04\xDF\xC2[09`G\xC8X\xA1@)\xC41\xB2\xBA\x0E\x17\xE4\x8D\xE9L\xE7\xC7S\xA48\xBCz\xAE/\x1D\xB0%D\xB5\xC0<s\xAE\"-\xCE\xBC\xB2\x13\xC51{#\x8ED\xA8\xD8\xFB{\x1F\x9E\x86\xD5\xBA\x91<\x82\xE3d\x88\e\xAD\x14D\x8B,?F\xE4!mOGP\x9Ca\xC7\f\x9D\xC2\x92#\x7Fj=\x81w)\x8B\x81cp\xCD\e \x8F\xCBx\x04t$\xEF\xD3m\x99\xDE\x940/\xD7\xBBE\xFC\xF4_\x85\xCD\xFF\xF4\xF5(9\xAF>y-b,\xF7\x1Av\x97y[\xC6\xCD\xE1&\x00XX\xD6\x19v\x17\xF0Y\xA3\x910 \x88y)\xAF.E\x0E\xA7\x9BFX'h\bx\xC0\xFD\xCE\xF2B\x85\xE1\xCF \x89\x82\xCF\xF5\xE0o\xB0\x02M\xF6G}r\x19/\x8D\xB3\x9B\x83S\xAA\x10i\xA6\xCE\x84f\xB1h\xF4\x92)X\xBC\n\x93\x82\xB3\xAAo\x888\xE6\xB2m\x0E\x12\x8F\x96TK\xB8\xB4\xB2Fh\x9ARBV\x14\xCB4\x0E\x13Dm\xCD\xE9W*EM\xFF\"\xE6\x93\r\xAA\xB0\x10,%B\x99\x1F\xA5\xC3\xB8\x9F!\xE6\xAC\eE\x14)\x8A\"F\xCC\xA0\xDF\n\x0E\xA0da\xC2\xF0\xAF\x99\xAB\x9CP\xD3\xA6\xAC\a\xC4Q\xB3\x1DQq\xEE\xFE\xD5\x8D\xE5\xE3 &4\xAB\xAE\x87\xF3\x1CK\x84\xDE\x10\x87y\x89\x13\xE9\x86,\xF3\x14\x01\xFF\x95I\xBE\xAC\x10\xC6\x94\xFD\e&\b\x99\xA2\\J\xB3c\x9A\x97\xE4S\xB9k6uj\x1AP5\xF08\xB3\x92\xEB%m\x91\xF9\x13fP\x11i\xC4\xB6$\xFF\xB3\x81Cp-X\x83&\x1D`:\x96p\xE2E\xDD5\xC8i\x14\xEE\xF7K\xCE_[\x11\x18\b\xEE\xCB5\x10\xA8\x96\xA4P\xB5$Gc\xFE\x98\xDDi\x7F\x84il\x7Fc\xF3hw\xCDo\x04\xB0#\xF6\xD5\xFCn*lj\x99#\b\xA6K\x8Ac\xE17Qa\xC5FFY;\xB5\x98_v\xB3\x11\xDAjl\x19\x97\xA13\x06\x9B!\x93\x81\x1A\xE3\xEB\xFC\xCE\x90\x18\xE5\x15\xED\x02\xD9\x97\x89\xE8\x1D\x88\x98\x9E3W\xCA\x8CM\ej\xA9\x10\xFB#\x9A\x0E\x16\xBB\b\x03\x9F\x9Cn\xCA\xDF\"4\x90\xC5\xC05j\xC4J\x9C\x8D\x84\x9B\x88\x19\x95\x94[\x1E\xB9\xF2:W\xDD\xFA\xD09 \x16(^\xE9D\x16d\xDE\xCA\xBAF\x97\xE2'\xB4'H\xF3e\xE7\x150\xA7\xD2d\xFCy[\x06 Q\x1As\xAD3\xDEl\xD6\x168h\xAAK\x85\x94\x98\xCEjS\xB7\x81A\xF1*\x8D(*E\x98\x16\x7F\xCBu\xCB(\xD9\e\xBC\xF2\x85\xEC9R\xF97R^\x14_4\xCD1\xF0\xCD\x7F\x94ekJ^l\x7F\x924p\xF7eM\x99\xB6u6\xDAF3$\xA9\xD8r\xCC\xFA\xF8-\xAF\xBB$'j\xB1\xC3\x1D\xE9\x95\xBE\xF2\xDD$\a\xDE!2\x01\xCBM\xD4\f.9\xAD3\x82\xD9\xE6\x02\xB3\xD8\xA1\x93I\xE9?\xC8\xF0X\xC5\x8A\x8BF\xE6i\x996L\xCF\x81\x91uU\x8A\x99\xE4\xF2Cx{n?\x04\xE5RB\x9F\x1FAR\xFC\xFE\b\x0EY\xCDt\x96g\xCEk\xE0\xB4\xBC\x98\r\xB1\x8A\xC4N&\xF6\x8C\xC0*\x8D-D'f*\x8Fn[,\x84<\xB09\e\xFD\x01\xB2C\x9A\xBE\x15\x10q\xA3.\xADX\x9Ah\x86\x13\xDA&+]\x92o\x92\x1CZ\xC7b\x00r\t\x02\xDA\x9FLpI1\v4&'\xAA\xE7\fz\xF4\xA2\x89\xEBD\x0Fe\xA4\xB5\xC8M\xD8\xFB\xBC\xF0\xFEF\x11\xB3u\x0F\x8A\x91)J5\xF5\e\\\xC1WN\xC8*O\xF99\xFFsBO\xBF\xDE\x80\x9A<}\x8E\x1EQ\x00\x8Dz\x8F?\xC1\x91\xD3\x9D\xF5\\-\xE8\xC4\xE4\v\xA5x\xFA\x04\xFF8\xF0;g\xB8\x1D&\xDF\xEDnkh\xDAW\x99\xCE\x82qHk:\x88\x16\x1C}\x10]q=\xC5X\xCB\x18\x91=\x82\x9E\xB4\xAE)g\x80R\x16S\x84\xBE\xD4'\xC1\e5\x8F@\xAD\\]\xE6\xD9$\x1E\xB9\xD2,\xBF\xDD\xEE\xD9\t8\xFD\xDE\xE7\x93\x87H\xCC\xC9r\xCA\x98\x0E\x03\xCD\xDF\x99\x85\x89`s\\\xE4\xF7G1\xCFF\xB8f\x17\xF8\xDD\xAF\xE2\xCE:I\x0FI\x91\x9B+\x9E9\f\xD2\xFE;\x12:\xB3\x9E_Dr\xBE\xCF\x8D\x1AY\x94\xEC\xCEv\xD7M\t\xD7~WN\ayWX\xC9K\x93\xC0\xDD\xD9\xBD\x16\x12\xBD\xA7\x9A\x168\x8F\x80\xBF9\x92\xE3\x9C5\x14\x14\xF3=\xB7s\x1F\x14\xCB\xB0\x8Az\xE0s\xAF\xCF\xA8\xD9\xD5\e\x1C\x84\xA2\xC44>v\xD4\x91\x06\bin\x06G\xEC\x81\x96f8\x9Dr\xC6\xAE\x0FQ#\xBFM\xC5\xD4\xD4\\\xB7N\xEC{\x13?&\x11\xAAM\n\x12\xBDn\x9C\e\xF6f\x8AN{\x9A\xDF\xE16(\xBC\xA9X\x8A\xD2J\xB5\x9E\xA9\xED\xD1M\x0E\x95y\xDFq\x18\xFF\xE9\xA4s\xE9\x8Dj\xF3\e\x88+\x12\xBC\x84:\x89\x02\xF8\x95\xE7\xDF\x84;\xEF\xAA\xFE\xA4\xFA\\\xC4Y\xA3\x12\xE4\xBD\xE9\xE2\x1E\xD8x\x15\xB8\xFB\xA3\xD1\xE2\xDD\xF9\xB6\vd\x1A\x99i\xDC\x98\xB4nv\xEA\xFC\r\x95F~5m\x93\xFE\xDE\x81\xBE\xAF\x0Fd\n8\xB4\xA6\xF1\x11\xC1E\x8E\xEA\x009\xE6\xD1-mc\x12\xD0.\x96RAS\xBCkBt\xBCb\xA6\xDE\xB75\xE7b'\xB9\x80\xF1\xDA\xB7\xA8\xB3\x12]\xA6\xDF\xAD\xDA.\xC0\x9A\"\xD7\xC88\xC6\xA6\xA3P\x10\xD0\xB6\xCF\xD3gvc\x02\x98\x130oZ\x1D\x84\xCED\x01\x1DpI\xCD(\xEF\xBD\x81\xD1Lg>\xD0\xBA\xCC{\xDB\xB1\xCCN\xE4\x98m\x93\xDB\xBE\xAC\x19\xDFo\x8D\xD8\xF36:F\xE6\xC7J\x00h\xC8\x14V\x7F2\xA6\xF3sW\xD7\x86\xE1\xEF\xB6\\\xFD\x85\x10\xCB?l\xE8\n\xC3\x7F\v\xFD\xABh*Z\xFA\x8C\xC8\xAE.\xA3\xB2p\x06co\x12\"\xBA\x82w\x05\xDCd\xA1\xE6\x16yX\xE6\xDD\x12\xD7\xA1\xDE\x17H\xC5\x19]Y\xD8\xE3c\xAE}\x80\xDC\xFA\xF3J\xB4\x0F\x1Cs\n$y\xB6F\xB0\x89\xB02\xF1\x81\xB6&\xA0c\x06\xC3\x1EoV,\xC5\xAB\x82ytW\x961g\x89\xA8\x86\xD3\x1DR\x10\xD2\x90\x97\x9B\xA3a\xAC\x89h_\x95-\x01L\xE2\xEF\x848\xA9\xEE\n\x13;\xE6\x99\xF4\xB8?]\xE3\xF1\a\xC8[\xF6\xE2\xAC\xF6\x06\x9A\n[\x13\xA0!\xF7\xF6\xC8\x161x \xBB\rK\xE9-\xA2\e\xA9[T'\xDF\xAE\xD4\xDA&t\xA2\xD9\xC0/7\xE6\xB6\x8C%\t\xAC\x10ir\xEA,#\x91BA\xCE@g\xE30\xE3$\xB45u\xBF\r\xB6km/\xCB;U\xDB\xB4\xB4\x8B\x9F\x93p5b\x9B\xDA\xDF6\"\x81\xF5\x9FL\xCE\xEB{\xFE\x96\xEE\x05\xA4:\xB1\xC2D\xE1\x05=_\xD0\xEE\xBA\xEAY93\e\xCB\x9F\xF0i\x80\x89\xA5\xAD\xFCQ(\xBC-\xEC\x06b^\xDCd\xE4y\xA7\x02oJW#\xAE\x84\xA2\xEB\x8E\xE4\x94\x17\xA9\xE4]\xBDR\xD1;MAw!\xE6\xD9\x86.u\xA0\xFAv\x0F:At0M9\x9C1Td\xD7\xD5\x92+\x9Ci\xEE\x85\x10g\xBA\x87\x19\x97{e[\x8C\xDEJ\x95\x84\xBC\xCC\xB2\x93\xBA\x99\xE5\r\x8A\x82Y\xCC\xF5L+\xA1\xF3\xCC\x99\xDF4\xE8\xB92k<\x03S1\x8C\x88\xFC-\x19\xC4\xC3q\x1E\xEC\xB8\xE3DxX\x9F\x8C\xE4\xF5U\xE2\xE4\x8A\x8F\n\x85\e\xC4\xAE4\x18\xF1\x06\xE5\xC5\x1Cg\xAEk_\x88\x8E\vqW`\x8E\xB7\xAE\xAB\xEF\xDF\xCD=\xCC}\xEE\xAD\v\x81\x13\x97\xB0\x18\x13\x9B\xD3K%\xCC}Jgt\x8E\xD91p~y\x96\xBF\x99\xD7\x9A\bi\x82\xD4d\xC7\x9F\x17tM\x9D6\x85y\xE5\x92MEw \xAD\xB3\xA0+E\xAF\xFD\xCC\xC0]\xD6\xF4\x9F\x19\xB4_\x0E\xD8\xE7\xA9\xA3\xB9\xB0{\xA1\xC4\x98\xD78\x13/\xDDK\x93\xB9Z2\x94\xFE\xE6tgb\bNg\e2\xA1U\xD8\xD9\x91\xBF\xB5\xB1P]*}\xE2tPM\xED\x8Ci\x9B\x84\x0F\xF9\xB1\x7F\xC5\xB4\xA7\xB8g\xD2\x83\x93\xBD]\x83Z\xF3\xE3I\xCF\xB9\xA0\x19\xD4M\xCFaR\xCB\xA1\xF7\xA5b\x8E\\\xFD\xF4\x05n\x02\xC9\x84\xC4\xA6\xA5\xFF?zn&3SA\xF2(\x8DB\xDE\x1F\xA4\x10\t+\xE0\x01p\xAC\x99\xBE\x9AXwY\x9Br\xFB\x16\x18M\xC4\xCE\x1C\xDB\xB6\x8A\xB4o\xE9\xD1\xB8\xDA\xEDj6\xC9\xEA\x0FTv\x84\x9A\x1D\xCAq[\xD1\xBD\xE3\xFE@\xD1\xF51\xB0\xB3\x85y\xF08]\x9AG\xDEJ`n\x80\xDB\xF2\xB5\xBB\x9B\xBD7\xFAp\xAAm\x01t\a>\xE4\xBC%ECo\xBEt\xC4\xDEQ\xCF\x1C\xF4\xC6\xF4\x86\xD0{\xAA\x19\xE2\xDEQ\xCC\x10:\xA7\x95\xB9\x19\xDE\xD4\xC9\x10<\xA0\xE7\xD5\x8752\v\x9DN\xED\nzG#W\xB8\xFB\x1A\xB9\x82\xCEhdv\x86\xB74r\x05v\xDEp\xDE\x88P-!\xD1i/\x14\xE9K\x9A\x88\xBD\xAA{\xDCo\x8D\xE4w\xF8\xC7\xA4\xBE\xC3\xAD\x93\xEC\x0E7\x15\xF4\xD2w\apnb.\x91\x17\xF4\xE1\x90*}\xE3E\xDB\x8D\xED\x9E&\xECS\xC5\r\xFF<\xE9\xD2\xDD\x16\x98x:\xDB\xCF\xBCMFW\xEA\xD7T\xFC\xB2\f\xE5==\x8F]\xA5\x17N\xE1i\xE4\xAE\x88'e>\x85\x00J+\x91\x8B\x1E\xB9{u\x1C\x11\xDD\xD3\x0E\xA5\xA8\x8A\x9Eb\xA8l\xA0\x10;4\x93\xB1\xD8\x01\vUy\xC3\xCD\x9B^\x17a\x86\xEC[\x81heP\xEEPE\xDD3\v\xD5\x05\x83D2\xAF2\xF3\xAD_\xB76[\x9E\x8A\x18f\x8E*\xC2so\x96\x8B\xF7\x91\xDD\xA3\xE5\xF7\xB9\xAFR\x06V@_\xD0\xB4\xDF\xD6\xF4\xD5\xDA\xD6<*\xD1\xF7Am5d\xEE\x06\x82\x1D\x8E\x8A\xD0\xA0\xA2hF\x96\x85Tm\xBDz\xDE\xED\xED\xAB\xEB$\xEB\xA1\xE7\x13\xFB\xCD %O\xC1\xEA\x99>k\xF3\x02p\xC2\x90\xFEf|\xEF\xE3\xD7\x0F\x85\xF0\xBB\x16\xE3)\x0F7\xFB,\v3\xEE\xFBa\x10\xACV?\xF0j\xDB\xF1\x93\xDD!\xDC\xB3\x8C\x87<\xD9f!\v\xB6k\xB0\xA9{pXy\xC1n\xEF\x05^\x0F^\xEF\x83U\xC8\xB7FX\x1C\x84\xD9\xFE\xB0\xF9\x81\xBD\xA6\x85\x7F\x17Q\x14\xAF=\x80\xA7\xBB\xE7p\e\xAF\x93\xF0ywH\xC3\x98\x05\xEB\x1F\x1A\xDDT=b\xBBO\x930}^\xA5a\x96\x1E\xD6a\x16pn\x10\xFD\n\x13\xBE\x0F\xC28H\xC28]%\xE1\xEE`\xF9\xAB\x8E\xBF{fI\xC8\xD7\xABux\xC8R\xCCd\x95\xF9\x06\xB1\xEE\xA7\x19\xECv\xE1s\xB2e\xE1:Y\xAF\xC3}\xC0\x03\x83\xD8\xF4zc\xCF,d\xFEa\e\xAE3\f\xB2\xE5\xB1\x95\xD1+\xE3\xF9\x90\xF0\xF0\xB0\xF7\xF1\xE7\x90\xAD\xC2M\x1Cl\rbg>~i\x8A\"\xBA\xB1\x890\xA1<\x85e\xA3\x9Aq\xF5~|\t\x1D3\xBC\xFEr\xCA^\x81\xB4oi\xF6k \xB2\xAE\x96b\xD2N\xF3\xC5\xD6\xCD\xF7\xE2`\x98\x8F^1\xEC\xF1\x99\xBC\xED\x9A\xCB\x95\xF1C\xEE\xE4H::\x9D\xC1\xEF\xDF\xBF\x7F\xF9\x1F>*\xD6t),\x00\x00",
           headers: {
          'Accept'=>'*/*',
          'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
          'Content-Encoding'=>'gzip',
          'Content-Type'=>'application/octet-stream',
          'Host'=>'collector.newrelic.com',
          'User-Agent'=>'NewRelic-RubyAgent/8.8.0 (ruby 2.7.3 x86_64-darwin20) zlib/1.2.11'
           }).
         to_return(status: 200, body: "", headers: {})
      block_was_called = false
      Funktor::Middleware::NewRelic.new.call(job_double) do
        block_was_called = true
      end
      expect(block_was_called).to be_truthy
    end
  end
end
