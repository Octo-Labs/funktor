runtime: ruby2.7

stack_name: funktor_test

# Incoming Job Handler
incoming_job_handler:
  # Use memory_size to adjust the reousrces (both memory and CPU) available
  # memory_size: 512
  timeout_in_seconds: 20 # This handler might have to handle several incoming jobs at once
  # WARNING : You probably don't want to limit concurrency on incoming jobs.
  # concurrency: 100

# Delayed Job Activator
delayed_job_activator:
  # Use memory_size to adjust the reousrces (both memory and CPU) available
  # memory_size: 512
  execution_schedule: rate(1 minute)
  activation_window_in_seconds: 120 # Activate any jobs scheduled for the next two minutes
  timeout_in_seconds: 300 # Allow an activation job to run for up to 5 minutes
  concurrency: 1


queues:
  default:
    # Use memory_size to adjust the reousrces (both memory and CPU) available
    # memory_size: 512
    # You can set the batch size. Max of 10_000 for normal queues, 10 for FIFO.
    # batch_size: 10
    # How many seconds should AWS wait for a batch to fill up before executing lambda?
    # For immediate execution set the batch size to 1.
    # maximumBatchingWindow : 1
    # A single handler can receive up to batch_size jobs at a time. Make sure timeout is long enough.
    timeout_in_seconds: 300
    # You might want to limit concurrency of executing jobs to stay within resource limits (like DB connections).
    # concurrency: 10
    # Visibility timeout should only come into play in the case of Funktor errors.
    # Application level errors should be handled by Funktor retry mechanisms.
    # The visibility timeout should be at least as long as the function timeout, and up to 6 times larger.
    # visibility_timeout: 300
    # TODO - Is it advisable to use FIFO queuues with Funktor?
    # TODO - Maybe this isn't really even supported by CloudFormation?
    # fifo: false

# TODO - Maybe this is handled in the Dockerfile?
package:
  patterns:
    - Gemfile
    - Gemfile.lock
    - ../app/**
    - ../config/**
    - ../lambda_handlers/**
