# WARNING : You probably don't want to mess with this file directly.
service: %{stack_name}
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

frameworkVersion: '2'

provider:
  name: aws
  runtime: %{runtime}
  lambdaHashingVersion: 20201221
  ecr:
    images:
      funktorimage:
        path: ./
        # TODO : Expose buildArgs via funktor.yml?
        buildArgs:
          BUNDLE_GEM__FURY__IO: ${env:BUNDLE_GEM__FURY__IO}
  # TODO : Expose environment to funktor.yml?
  environment:
    FUNKTOR_INCOMING_JOB_QUEUE:
      Ref: IncomingJobQueue
    FUNKTOR_ACTIVE_JOB_QUEUE:
      Ref: ActiveJobQueue
    FUNKTOR_DELAYED_JOB_TABLE:
      Ref: DelayedJobTable
    delayedJobTable:
      Ref: DelayedJobTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:Get*
      Resource:
        - '*' # TODO : This should probably be more selective...
    - Effect: Allow
      Action:
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:SendMessage
        - sqs:GetQueueAttributes
      Resource:
        - "Fn::GetAtt": [ ActiveJobQueue, Arn ]
    - Effect: Allow
      Action:
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:SendMessage
        - sqs:GetQueueAttributes
      Resource:
        - "Fn::GetAtt": [ IncomingJobQueue, Arn ]
    - Effect: Allow
      Action:
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:SendMessage
        - sqs:GetQueueAttributes
      Resource:
        - "Fn::GetAtt": [ ActivityQueue, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ DelayedJobTable, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - "Fn::GetAtt": [ StatsTable, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource:
        Fn::Join:
          - ""
          - - "Fn::GetAtt": [ DelayedJobTable, Arn ]
            - "/index/performAtIndex"

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, 'dev'}
  incomingJobQueueName: ${self:service}-${self:custom.stage}-incoming-jobs
  incomingJobQueueAccessPolicyName: ${self:service}-${self:custom.stage}-incoming-job-queue-access
  incomingDeadJobQueueName: ${self:service}-${self:custom.stage}-incoming-dead-jobs
  activeJobQueueName: ${self:service}-${self:custom.stage}-active-jobs
  activityQueueName: ${self:service}-${self:custom.stage}-activity
  activityDeadQueueName: ${self:service}-${self:custom.stage}-activity-dead
  deadJobQueueName: ${self:service}-${self:custom.stage}-dead-jobs
  delayedJobTableName: ${self:service}-${self:custom.stage}-delayed-jobs
  statsTableName: ${self:service}-${self:custom.stage}-stats
  dashboardName: ${self:service}-${self:custom.stage}-dashboard

# you can define service wide environment variables here
#  environment:
#    variable1: value1

functions:
  # TODO - How could other functions be passed in from funktor.yml?
  #random_job_generator:
    ##handler: lambda_handlers/random_job_generator.RandomJobGenerator.call
    #image:
      #name: funktorimage
      #command:
        #- lambda_handlers/random_job_generator.RandomJobGenerator.call
    #timeout: 170
    #reservedConcurrency: 0
    #events:
      #- schedule: rate(1 minute)

  delayed_job_activator:
    image:
      name: funktorimage
      command:
        - lambda_handlers/delayed_job_activator.call
    timeout: %{delayed_job_activator.timeout_in_seconds}
    # TODO - handle memory and concurrency
    #reservedConcurrency: 1
    events:
      - schedule: %{delayed_job_activator.execution_schedule}

  incoming_job_handler:
    image:
      name: funktorimage
      command:
        - lambda_handlers/incoming_job_handler.call
    timeout: %{incoming_job_handler.timeout_in_seconds}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - IncomingJobQueue
              - Arn

  # TODO - We need one of these per work queue
  active_job_handler:
    image:
      name: funktorimage
      command:
        - lambda_handlers/active_job_handler.call
    timeout: 300
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ActiveJobQueue
              - Arn

# you can add CloudFormation resource templates here
resources:
  - ${file(resources/sqs-queue.yml)}
  - ${file(resources/sqs-incoming-user.yml)}
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/cloudfront-dashboard.yml)}

